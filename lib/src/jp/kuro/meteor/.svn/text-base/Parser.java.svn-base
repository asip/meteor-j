package jp.kuro.meteor;

import jp.kuro.meteor.hook.Hooker;
import jp.kuro.meteor.hook.Looper;

import java.util.List;

/**
 * パーサ共通インタ－フェイス
 * @author Yasumasa Ashida
 * @since 2003/01/25 18:31:27
 */
public interface Parser {
    public static final int HTML = 0;
    public static final int XHTML = 1;
    public static final int XML = 2;

    //void parse(String document);
    //void read(String filePath,String encoding);

    /**
     * 要素名で要素を検索する。
     * 先頭から検索し、最初にヒットした要素の情報を返します。
     * @param elmName 要素名
     * @return 要素
     */
    Element findElement(String elmName);

    /**
     * 要素名、属性(属性名="属性値")で要素を検索する。
     * 先頭から検索し、最初にヒットした要素の情報を返します。
     * @param elmName 要素名
     * @param attrName 属性名
     * @param attrValue 属性値
     * @return 要素
     */
    Element findElement(String elmName, String attrName, String attrValue);

    /**
     * 属性(属性名="属性値")で要素を検索する。
     * 先頭から検索し、最初にヒットした要素の情報を返します。
     * @param attrName 属性名
     * @param attrValue 属性値
     * @return 要素
     */
    Element findElement(String attrName, String attrValue);

    /**
     * 要素名、属性1と属性2(属性名="属性値")で要素を検索する。
     * 先頭から検索し、最初にヒットした要素の情報を返します。
     * @param elmName 要素名
     * @param attrName1 属性名1
     * @param attrValue1 属性値1
     * @param attrName2 属性名2
     * @param attrValue2 属性値2
     * @return 要素
     */
    Element findElement(String elmName, String attrName1,String attrValue1,String attrName2,String attrValue2);

    /**
     * 属性1と属性2(属性名="属性値")で要素を検索する。
     * 先頭から検索し、最初にヒットした要素の情報を返します。
     * @param attrName1 属性名1
     * @param attrValue1 属性値1
     * @param attrName2 属性名2
     * @param attrValue2 属性値2
     * @return 要素
     */
    Element findElement(String attrName1, String attrValue1,String attrName2, String attrValue2);

    /**
     * 要素名を変更する
     * @param elm 要素
     * @param elmName 要素名
     */
    void setElementName(Element elm, String elmName);

    /**
     * 属性をセットする。
     * 属性名で指定した属性が既にある場合は更新し、ない場合は追加する
     * @param elm 要素
     * @param attrName 属性名
     * @param attrValue 属性値
     */
    void setAttribute(Element elm, String attrName, String attrValue);

    /**
     * 属性をセットする。
     * 属性名で指定した属性が既にある場合は更新し、ない場合は追加する
     * @param attrName 属性名
     * @param attrValue 属性値
     */
    void setAttribute(String attrName, String attrValue);

//    /**
//     * 属性をセットする[属性値省略属性用]。
//     * @param elm 要素
//     * @param attrName 属性名
//     * @deprecated
//     */
//    void setAttribute(Element elm, String attrName);
//
//    /**
//     * 属性をセットする[属性値省略属性用]。
//     * @param attrName 属性名
//     * @deprecated
//     */
//    void setAttribute(String attrName);

    /**
     * 要素から属性名で属性値を取得する
     * @param elm 要素
     * @param attrName 属性名
     * @return 属性値
     */
    String getAttributeValue(Element elm, String attrName);

    /**
     * 要素から属性名で属性値を取得する
     * @param attrName 属性名
     * @return 属性値
     */
    String getAttributeValue(String attrName);

    /**
     * 属性マップを取得する
     * @param elm 要素
     * @return 属性マップ
     */
    AttributeMap getAttributeMap(Element elm);

    /**
     * 属性マップを取得する
     * @return 属性マップ
     */
    AttributeMap getAttributeMap();

    /**
     * 属性を削除する
     * @param elm 要素
     * @param attrName 属性名
     */
    void eraseAttribute(Element elm, String attrName);

    /**
     * 属性を削除する
     * @param attrName 属性名
     */
    void eraseAttribute(String attrName);

    /**
     * 要素の内容をセットする
     * @param elm 要素
     * @param content 要素の内容
     * @param entityRef エンティティ参照フラグ
     */
    void setContent(Element elm, String content, boolean entityRef);

    /**
     * 要素の内容をセットする
     * @param content 要素の内容
     * @param entityRef エンティティ参照フラグ
     */
    void setContent(String content, boolean entityRef);

    /**
     * 要素の内容をセットする
     * @param elm 要素
     * @param content 要素の内容
     */
    void setContent(Element elm, String content);

    /**
     * 要素の内容をセットする
     * @param content 要素の内容
     */
    void setContent(String content);

    /**
     * 要素の内容を取得する
     * @param elm 要素
     * @return 要素の内容
     */
    String getContent(Element elm);

    /**
     * 要素を削除する
     * @param elm 要素
     */
    void eraseElement(Element elm);

    /**
     * 要素名とID属性でCX(コメント拡張)タグを検索する
     * @param elmName 要素名
     * @param id ID属性値
     * @return 要素
     */
    Element findCXTag(String elmName, String id);

    /**
     * ID属性でCX(コメント拡張)タグを検索する
     * @param id ID属性値
     * @return 要素
     */
    Element findCXTag(String id);

    /**
     * ドキュメントを出力する
     */
    void print();

    /**
     * 要素に対してHookerサブクラスに記述した処理を行う
     * @param elm 要素
     * @param hook Hookerサブクラス
     */
    void execute(Element elm, Hooker hook);

    /**
     * 要素に対してLooperサブクラスに記述した処理を行う
     * @param elm 要素
     * @param hook Looperサブクラス
     * @param list ループ処理用データ
     */
    void execute(Element elm, Looper hook, List list);

    /**
     * 子パーサを取得する
     * @param elm 要素
     * @return 子パーサ
     */
    Parser getChildParser(Element elm);

    /**
     * 子パーサを親パーサに反映する
     */
    void flush();

    /**
     * ルート要素を取得する
     * @return ルート要素
     */
    public RootElement getRootElement();

    /**
     * 親パーサを取得する
     * @return 親パーサ
     */
    Parser getParent();

    /**
     * 親パーサをセットする
     * @param pif 親パーサ
     */
    void setParent(Parser pif);

    /**
     * 要素を置換する
     * @param elm 要素
     * @param replaceDocument 置換文字列
     */
    public void replace(Element elm, String replaceDocument);

    /**
     * ドキュメントを取得する
     * @return ドキュメント
     */
    public String getDocument();
}
